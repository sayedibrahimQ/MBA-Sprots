# Generated by Django 5.1.2 on 2025-06-04 08:35

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='DeliveryFees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(db_index=True, max_length=255, unique=True, verbose_name='City/Region')),
                ('delivery_fee', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'verbose_name': 'Delivery Fee',
                'verbose_name_plural': 'Delivery Fees',
                'ordering': ['city'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Newsletter Subscription',
                'verbose_name_plural': 'Newsletter Subscriptions',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Product Type',
                'verbose_name_plural': 'Product Types',
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text='Percentage discount (e.g., 10 for 10%)', max_digits=5, verbose_name='Discount Percentage')),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('active', models.BooleanField(default=True)),
                ('max_usage_limit', models.PositiveIntegerField(default=1, help_text='Max number of times this promo code can be used in total.', verbose_name='Maximum Usage Limit')),
                ('used_count', models.PositiveIntegerField(default=0, editable=False)),
                ('min_cart_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum cart total for the promo to be applicable.', max_digits=10, null=True, verbose_name='Minimum Cart Value')),
            ],
            options={
                'verbose_name': 'Promo Code',
                'verbose_name_plural': 'Promo Codes',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_token', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('number_of_items', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('promo_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carts', to='ecommerce.promocode')),
            ],
            options={
                'verbose_name': 'Cart',
                'verbose_name_plural': 'Carts',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_token', models.CharField(blank=True, db_index=True, help_text='For guest users/devices to track carts etc.', max_length=300, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=200, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=200, verbose_name='Last Name')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Primary Phone')),
                ('phone2', models.CharField(blank=True, max_length=20, verbose_name='Secondary Phone')),
                ('full_address', models.CharField(blank=True, max_length=500, verbose_name='Full Address')),
                ('city', models.CharField(blank=True, max_length=200, verbose_name='City')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Required if user is not set (guest checkout)', max_length=254, null=True, verbose_name='Email')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id_display', models.CharField(blank=True, help_text='User-friendly order ID, can be generated.', max_length=20, unique=True, verbose_name='Order ID (Display)')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Discount Amount')),
                ('subtotal_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Subtotal Price')),
                ('shipping_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Shipping Fee')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Grand Total Price')),
                ('shipping_full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('shipping_address_line1', models.CharField(max_length=255, verbose_name='Address Line 1')),
                ('shipping_address_line2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address Line 2')),
                ('shipping_city', models.CharField(max_length=100, verbose_name='City')),
                ('shipping_postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postal Code')),
                ('shipping_country', models.CharField(default='Egypt', max_length=100, verbose_name='Country')),
                ('contact_phone', models.CharField(max_length=20, verbose_name='Contact Phone')),
                ('contact_email', models.EmailField(max_length=254, verbose_name='Contact Email')),
                ('order_notes', models.TextField(blank=True, null=True, verbose_name='Order Notes')),
                ('status', models.CharField(choices=[('pending_payment', 'Pending Payment'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('failed', 'Failed'), ('refunded', 'Refunded')], db_index=True, default='pending_payment', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Payment Method')),
                ('payment_id', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='Payment ID/Transaction ID')),
                ('is_paid', models.BooleanField(db_index=True, default=False, verbose_name='Is Paid')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='Paid At')),
                ('customer', models.ForeignKey(help_text='Customer who placed the order. Required.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ecommerce.customer')),
                ('promo_code_applied', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='ecommerce.promocode', verbose_name='Promo Code Applied')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_active', models.BooleanField(default=False, help_text='Is there an active discount?', verbose_name='Discount Active')),
                ('new_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price after discount, if applicable.', max_digits=10, null=True, verbose_name='Discounted Price')),
                ('color_options', models.CharField(blank=True, help_text='Available colors for the product if variants are not used for color.', max_length=255, verbose_name='Color Options (comma-separated)')),
                ('description', models.TextField()),
                ('img', models.ImageField(help_text='Main product image, will be compressed to WEBP.', upload_to='products/', verbose_name='Main Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('best_selling', models.BooleanField(blank=True, default=False, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the product available for sale?', verbose_name='Is Active')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='ecommerce.category')),
                ('product_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='ecommerce.producttype', verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Additional product image, will be compressed to WEBP.', upload_to='product_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Description of the image for accessibility.', max_length=255, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(help_text='e.g., S, M, L, XL, 32, 40, etc.', max_length=100, verbose_name='Size')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Stock Quantity')),
                ('additional_price', models.DecimalField(decimal_places=2, default=0, help_text='Price difference for this variant, e.g., +5.00 for XXL', max_digits=10, verbose_name='Additional Price')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'ordering': ['size'],
                'unique_together': {('product', 'size')},
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='promotions/')),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Optional: General discount percentage for this promotion (e.g., 15 for 15%)', max_digits=5, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('active', models.BooleanField(default=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='Link specific categories to this promotion.', related_name='promotions', to='ecommerce.category')),
                ('products', models.ManyToManyField(blank=True, help_text='Link specific products to this promotion.', related_name='promotions', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Promotion',
                'verbose_name_plural': 'Promotions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name_display', models.CharField(blank=True, help_text='Name shown with the question if customer is anonymous or prefers different name.', max_length=150, verbose_name='Display Name for Question')),
                ('text', models.TextField(verbose_name='Question Text')),
                ('answer_text', models.TextField(blank=True, null=True, verbose_name='Answer Text')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Asked At')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='Answered At')),
                ('is_approved', models.BooleanField(default=False, help_text='Is the question (and answer) approved to be shown?', verbose_name='Approved')),
                ('is_answered', models.BooleanField(default=False, editable=False, verbose_name='Answered')),
                ('answered_by', models.ForeignKey(blank=True, help_text='Staff user who answered.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions_answered', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions_asked', to='ecommerce.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Product Question',
                'verbose_name_plural': 'Product Questions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(blank=True, help_text='Name to display if customer is anonymous or wants a different name.', max_length=100, verbose_name='Display Name')),
                ('review_text', models.TextField(verbose_name='Review Text')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('is_approved', models.BooleanField(default=True, help_text='Is the review approved to be shown?', verbose_name='Approved')),
                ('customer', models.ForeignKey(blank=True, help_text='Customer who wrote the review. Can be null for anonymous.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='ecommerce.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField(max_length=1000, verbose_name='Video URL')),
                ('video_title', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='ecommerce.product')),
            ],
            options={
                'verbose_name': 'Product Video',
                'verbose_name_plural': 'Product Videos',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(help_text='Snapshot of product name at time of order.', max_length=255, verbose_name='Product Name')),
                ('variant_details', models.CharField(blank=True, help_text='e.g., Size: M, Color: Red', max_length=255, null=True, verbose_name='Variant Details')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('price_at_purchase', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price at Purchase (per unit)')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.order')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ecommerce.product')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ecommerce.productvariant')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'unique_together': {('order', 'product', 'variant')},
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ecommerce.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ecommerce.product')),
                ('variant', models.ForeignKey(blank=True, help_text='Select product variant (e.g. size) if applicable', null=True, on_delete=django.db.models.deletion.CASCADE, to='ecommerce.productvariant')),
            ],
            options={
                'verbose_name': 'Cart Item',
                'verbose_name_plural': 'Cart Items',
                'ordering': ['-added_at'],
                'unique_together': {('cart', 'product', 'variant')},
            },
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('user__isnull', False), ('device_token__isnull', True)), models.Q(('user__isnull', True), ('device_token__isnull', False)), _connector='OR'), name='cart_user_or_device_token_exclusive', violation_error_message='Cart must be associated with a user or a device token, but not both or neither.'),
        ),
    ]
